import java.util.HashSet;

public class Node {
	Node next = null;
	int data;

	public Node(int d) {
		data = d;
	}

	void appendToTail(int d) {
		Node end = new Node(d);
		Node n = this;
		while (n.next != null) {
			n = n.next;
		}
		n.next = end;
	}

	Node deleteNode(Node head, int d) {
		Node n = head;

		if (n.data == d)
			return head.next;
		while (n.next != null) {
			if (n.next.data == d) {
				n.next = n.next.next;
				return head;
			}
			n = n.next;
		}
		return head;
	}

	static void removeDup(Node head) {
		Node elm_list = new Node(head.data);
		Node n = head;
		while (n.next != null) {
			if (n.next.search(elm_list) != null)
				n.next = n.next.next;
			else {
				elm_list.appendToTail(n.next.data);
				n = n.next;
			}
		}
	}

	static void removeDupHash(Node head) {
		HashSet<Integer> set = new HashSet<Integer>();
		set.add(head.data);
		Node n = head;
		while (n.next != null) {
			if (set.contains(n.next.data))
				n.next = n.next.next;
			else {
				set.add(n.next.data);
				n = n.next;
			}
		}
	}

	static void removeDupNoDS(Node head) {
		Node cur = head;
		Node ptr = head;
		while (cur != null) {
			while (ptr.next != null) {
				if (ptr.next.data == cur.data)
					ptr.next = ptr.next.next;
				else
					ptr = ptr.next;
			}
			cur = cur.next;
			ptr = cur;
		}

	}

	Node search(Node head) {
		Node n = head;
		while (n != null) {
			if (n.data == this.data)
				return n;
			n = n.next;
		}
		return null;
	}

	/*
	 * Tests whether two lists are equal. Two lists are equal iff every element
	 * in the list have the same value and position as the element from the
	 * other list
	 */
	static boolean is_equal(Node head1, Node head2) {
		Node n1 = head1;
		Node n2 = head2;
		while (n1 != null) {
			if (n2 == null) /* List1 > List2 */
				return false;
			if (n1.data != n2.data) /* Found mismatching elements */
				return false;
			n1 = n1.next;
			n2 = n2.next;
		}
		if (n2 != null) /* List2 > List1 */
			return false;
		assert(Node.size(head1) == Node.size(head2));
		return true;
	}

	/* Tests the number of elements in list, if given a head node */
	static int size(Node head) {
		int size = 0;
		Node n = head;
		while (n != null) {
			size++;
			n = n.next;
		}
		return size;
	}
	
	static Node findKthToLast(Node head, int k)
	{
		int size = size(head);
		if (k > size)
			return null;
		if (k < 0)
			return null;
		Node cur = head;
		while(size > k)
		{
			cur = cur.next;
			size--;
		}
		return cur;
	}
}
