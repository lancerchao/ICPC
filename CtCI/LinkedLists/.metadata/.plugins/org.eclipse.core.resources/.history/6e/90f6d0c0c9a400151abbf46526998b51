
public class Node {
	Node next = null;
	int data;

	public Node(int d) {
		data = d;
	}

	void appendToTail(int d) {
		Node end = new Node(d);
		Node n = this;
		while (n.next != null) {
			n = n.next;
		}
		n.next = end;
	}

	Node deleteNode(Node head, int d) {
		Node n = head;

		if (n.data == d)
			return head.next;
		while (n.next != null) {
			if (n.next.data == d) {
				n.next = n.next.next;
				return head;
			}
			n = n.next;
		}
		return head;
	}

	void removeDup()
	{
		Node elm_list = new Node(this.data);
		Node n = this;
		while(n.next != null)
		{
			if (n.next.search(elm_list)!=null)
				n.next = n.next.next;
			else
			{
				elm_list.appendToTail(n.next.data);
				n=n.next;
			}			
		}			
	}

	Node search(Node head) {
		Node n = head;
		while (n != null) {
			if (n.data == this.data)
				return n;
			n = n.next;
		}
		return null;
	}
	
	static boolean is_equal(Node head1, Node head2)
	{
		Node n1 = head1;
		Node n2 = head2;
		while(n1 != null)
		{
			if (n2 == null)	/* List1 > List2 */
				return false;
			if (n1.data != n2.data)
				return false;
			n1 = n1.next;
			n2 = n2.next;
		}
		if (n2 != null)	/* List2 > List1 */
			return false;
		return true;
	}
}
